CREATE PROC PROC_DIST_CLOSINGSTOCK_MONTH_TW (@SIGN_MONTH AS VARCHAR(6) = NULL)
AS
BEGIN
	--获取当天的结存月份
	IF @SIGN_MONTH IS NULL
	 SET @SIGN_MONTH=(SELECT SIGN FROM DMS_BALANCE_DATE WHERE GETDATE() BETWEEN BALANCE_START_DATE AND CONVERT(VARCHAR(10),BALANCE_END_DATE,120) + ' 23:59:59' )

	--新增的客户端 期初库存日期 放入经销商期初库存表
	INSERT INTO SPE_BEGIN_STOCK_DATE (
		DIST_ID,
		BEGIN_STOCK_DATE,
		SIGN
	)
	SELECT
		S.DIST_ID,
		MIN(S.STOCK_DATE) STOCK_DATE ,
		MIN(DBD.SIGN) SIGN
	 FROM DMS_STOCK_TRANSFER_BASE S WITH(NOLOCK)
	 LEFT JOIN SPE_BEGIN_STOCK_DATE SB ON SB.DIST_ID = S.DIST_ID
	 INNER JOIN DMS_CLIENT C WITH(NOLOCK)
		ON S.CLIENT_ID=C.CLIENT_ID
		AND S.STOCK_DATE BETWEEN ISNULL(C.BILL_EXTRACT_STARTDATE,'2000-01-01') AND ISNULL(C.BILL_EXTRACT_ENDDATE,'3000-01-01')
	 INNER JOIN DMS_BALANCE_DATE DBD
	 	ON S.STOCK_DATE BETWEEN DBD.BUSINESS_START_DATE AND DBD.BUSINESS_END_DATE
	 	AND S.TRANSFER_TIME BETWEEN DBD.BALANCE_START_DATE AND DBD.BALANCE_END_DATE
	 WHERE SB.DIST_ID IS NULL
	 GROUP BY S.DIST_ID

	 --删除重新跑的月分数据
	 DELETE FROM T_DIST_CLOSINGSTOCK_MONTH WHERE SIGN=@SIGN_MONTH
	 --插入经销商的期初库存
	 SELECT
		@SIGN_MONTH AS SIGN,
		S.DIST_ID,
		S.PROD_ID,
		S.BASE_QTY OPENINGSTOCK_BASE_QTY,
		S.COUNT_QTY OPENINGSTOCK_COUNT_QTY,
		S.BASE_QTY CLOSINGSTOCK_BASE_QTY,
		S.COUNT_QTY CLOSINGSTOCK_COUNT_QTY,
		NULL SALE_BASE_QTY,
		NULL SALE_COUNT_QTY,
		NULL R_SALE_BASE_QTY,
		NULL R_SALE_COUNT_QTY,
		NULL PURCHASE_BASE_QTY,
		NULL PURCHASE_COUNT_QTY,
		NULL R_PURCHASE_BASE_QTY,
		NULL R_PURCHASE_COUNT_QTY,
		NULL INOUT_BASE_QTY,
		NULL INOUT_COUNT_QTY
	INTO #STOCK_MONTH
	FROM DMS_STOCK_TRANSFER_BASE S  WITH(NOLOCK)
	LEFT JOIN DMS_STORE_MAPPING SM ON SM.ACTIVE_S_ID=S.ACTIVE_W_ID
	INNER JOIN SPE_BEGIN_STOCK_DATE D ON D.DIST_ID=S.DIST_ID AND D.BEGIN_STOCK_DATE=S.STOCK_DATE
	WHERE D.SIGN = @SIGN_MONTH

	UNION ALL
	--期初库存变更写到本月其他
	SELECT
		@SIGN_MONTH SIGN,
		S.DIST_ID,
		S.PROD_ID,
		NULL OPENINGSTOCK_BASE_QTY,
		NULL OPENINGSTOCK_COUNT_QTY,
		S.BASE_QTY CLOSINGSTOCK_BASE_QTY,
		S.COUNT_QTY CLOSINGSTOCK_COUNT_QTY,
		NULL SALE_BASE_QTY,
		NULL SALE_COUNT_QTY,
		NULL R_SALE_BASE_QTY,
		NULL R_SALE_COUNT_QTY,
		NULL PURCHASE_BASE_QTY,
		NULL PURCHASE_COUNT_QTY,
		NULL R_PURCHASE_BASE_QTY,
		NULL R_PURCHASE_COUNT_QTY,
		S.BASE_QTY INOUT_BASE_QTY,
		S.COUNT_QTY INOUT_COUNT_QTY
	FROM DMS_STOCK_TRANSFER_BASE S  WITH(NOLOCK)
	LEFT JOIN DMS_STORE_MAPPING SM ON SM.ACTIVE_S_ID=S.ACTIVE_W_ID
	INNER JOIN SPE_BEGIN_STOCK_DATE D ON D.DIST_ID=S.DIST_ID AND D.BEGIN_STOCK_DATE=S.STOCK_DATE
	WHERE @SIGN_MONTH > D.SIGN
	  AND S.TRANSFER_TIME BETWEEN ( SELECT BALANCE_START_DATE FROM DMS_BALANCE_DATE WHERE SIGN = @SIGN_MONTH)
					AND ( SELECT BALANCE_END_DATE FROM DMS_BALANCE_DATE WHERE SIGN = @SIGN_MONTH )
	  AND( SM.TARGET_STORE_CODE IS NULL OR SM.TARGET_STORE_CODE!='QITA_PINGBI')

	UNION ALL
	 --上月期末库存
	SELECT
		@SIGN_MONTH SIGN,
		DIST_ID,
		PROD_ID,
		CLOSINGSTOCK_BASE_QTY OPENINGSTOCK_BASE_QTY,
		CLOSINGSTOCK_COUNT_QTY OPENINGSTOCK_COUNT_QTY,
		CLOSINGSTOCK_BASE_QTY CLOSINGSTOCK_BASE_QTY,
		CLOSINGSTOCK_COUNT_QTY CLOSINGSTOCK_COUNT_QTY,
		NULL SALE_BASE_QTY,
		NULL SALE_COUNT_QTY,
		NULL R_SALE_BASE_QTY,
		NULL R_SALE_COUNT_QTY,
		NULL PURCHASE_BASE_QTY,
		NULL PURCHASE_COUNT_QTY,
		NULL R_PURCHASE_BASE_QTY,
		NULL R_PURCHASE_COUNT_QTY,
		NULL INOUT_BASE_QTY,
		NULL INOUT_COUNT_QTY
	FROM T_DIST_CLOSINGSTOCK_MONTH  WITH(NOLOCK)
	WHERE SIGN=CONVERT(VARCHAR(6),DATEADD(MM,-1,@SIGN_MONTH+'01'),112)
	UNION ALL
	--本月销售
	SELECT
		DBD.SIGN,
		S.DIST_ID,
		S.PROD_ID,
		NULL OPENINGSTOCK_BASE_QTY,
		NULL OPENINGSTOCK_COUNT_QTY,
		-S.BASE_QTY CLOSINGSTOCK_BASE_QTY,
		-S.COUNT_QTY CLOSINGSTOCK_COUNT_QTY,
		S.BASE_QTY SALE_BASE_QTY,
		S.COUNT_QTY SALE_COUNT_QTY,
		NULL R_SALE_BASE_QTY,
		NULL R_SALE_COUNT_QTY,
		NULL PURCHASE_BASE_QTY,
		NULL PURCHASE_COUNT_QTY,
		NULL R_PURCHASE_BASE_QTY,
		NULL R_PURCHASE_COUNT_QTY,
		NULL INOUT_BASE_QTY,
		NULL INOUT_COUNT_QTY
	--INTO #SALE_DATA
	FROM  DMS_SALE_TRANSFER_BASE S WITH(NOLOCK)
	INNER JOIN SPE_BEGIN_STOCK_DATE SB ON SB.DIST_ID = S.DIST_ID AND S.BILL_DATE >= SB.BEGIN_STOCK_DATE
	INNER JOIN DMS_DATA_SALE DDS ON S.ORIG_DATA_ID = DDS.ID
	LEFT JOIN DMS_STORE_MAPPING SM ON SM.ACTIVE_S_ID=DDS.ACTIVE_W_ID
	INNER JOIN DMS_CLIENT C WITH(NOLOCK) ON C.CLIENT_ID = S.CLIENT_ID
	LEFT JOIN DMS_BALANCE_DATE DBD WITH(NOLOCK) ON ((S.TRANSFER_TIME <= (CONVERT(VARCHAR(10),DBD.BALANCE_END_DATE,120) + ' 23:59:59') AND
		S.BILL_DATE BETWEEN DBD.BUSINESS_START_DATE AND CONVERT(VARCHAR(10),DBD.BUSINESS_END_DATE,120) + ' 23:59:59')) OR
		(
		S.BILL_DATE >= ISNULL(DBD.MIN_BILL_DATE,'2000-01-01') AND
		S.BILL_DATE < DBD.BUSINESS_START_DATE AND
		S.TRANSFER_TIME BETWEEN DBD.BALANCE_START_DATE AND CONVERT(VARCHAR(10),DBD.BALANCE_END_DATE,120) + ' 23:59:59'
		)
	WHERE 1=1 AND DBD.SIGN = @SIGN_MONTH
	  AND( SM.TARGET_STORE_CODE IS NULL OR SM.TARGET_STORE_CODE!='QITA_PINGBI')
	UNION ALL
	--本月调整销售
	SELECT
		DATA.SIGN,
		DATA.DIST_ID,
		DATA.PROD_ID,
		NULL OPENINGSTOCK_BASE_QTY,
		NULL OPENINGSTOCK_COUNT_QTY,
		-DATA.PROD_QUANTITY * PROD_UNIT.CONV_UNIT2_VAL * BASE_UNIT.CONV_UNIT1_VAL / PROD_UNIT.CONV_UNIT1_VAL / BASE_UNIT.CONV_UNIT2_VAL CLOSINGSTOCK_BASE_QTY,
		-DATA.PROD_QUANTITY * PROD_UNIT.CONV_UNIT2_VAL * COUNT_UNIT.CONV_UNIT1_VAL / PROD_UNIT.CONV_UNIT1_VAL / COUNT_UNIT.CONV_UNIT2_VAL CLOSINGSTOCK_COUNT_QTY,
		NULL SALE_BASE_QTY,
		NULL SALE_COUNT_QTY,
		DATA.PROD_QUANTITY * PROD_UNIT.CONV_UNIT2_VAL * BASE_UNIT.CONV_UNIT1_VAL / PROD_UNIT.CONV_UNIT1_VAL / BASE_UNIT.CONV_UNIT2_VAL R_SALE_BASE_QTY,
		DATA.PROD_QUANTITY * PROD_UNIT.CONV_UNIT2_VAL * COUNT_UNIT.CONV_UNIT1_VAL / PROD_UNIT.CONV_UNIT1_VAL / COUNT_UNIT.CONV_UNIT2_VAL R_SALE_COUNT_QTY,
		NULL PURCHASE_BASE_QTY,
		NULL PURCHASE_COUNT_QTY,
		NULL R_PURCHASE_BASE_QTY,
		NULL R_PURCHASE_COUNT_QTY,
		NULL INOUT_BASE_QTY,
		NULL INOUT_COUNT_QTY
	FROM V_DMS_REVERSE_DATA_SALE DATA WITH(NOLOCK)
	INNER JOIN MDM_UNIT_CONVERSION PROD_UNIT WITH(NOLOCK) ON PROD_UNIT.PROD_ID = DATA.PROD_ID AND PROD_UNIT.CONV_UNIT1_ID = DATA.PROD_UNIT
	INNER JOIN MDM_PRODUCT MP WITH(NOLOCK) ON DATA.PROD_ID = MP.PROD_ID
	INNER JOIN MDM_UNIT_CONVERSION COUNT_UNIT WITH(NOLOCK) ON COUNT_UNIT.PROD_ID = MP.PROD_ID AND COUNT_UNIT.CONV_UNIT1_ID = MP.PROD_COUNTUNIT_ID
	INNER JOIN MDM_UNIT_CONVERSION BASE_UNIT WITH(NOLOCK) ON BASE_UNIT.PROD_ID = MP.PROD_ID AND BASE_UNIT.CONV_UNIT1_ID = MP.PROD_BASEUNIT_ID
	INNER JOIN DMS_BALANCE_DATE DBD  ON DATA.SIGN=DBD.SIGN AND DBD.SIGN = @SIGN_MONTH
	UNION ALL

	--本月进货
	SELECT
		DBD.SIGN,
		S.DIST_ID,
		S.PROD_ID,
		NULL OPENINGSTOCK_BASE_QTY,
		NULL OPENINGSTOCK_COUNT_QTY,
		S.BASE_QTY CLOSINGSTOCK_BASE_QTY,
		S.COUNT_QTY CLOSINGSTOCK_COUNT_QTY,
		NULL SALE_BASE_QTY,
		NULL SALE_COUNT_QTY,
		NULL R_SALE_BASE_QTY,
		NULL R_SALE_COUNT_QTY,
		S.BASE_QTY PURCHASE_BASE_QTY,
		S.COUNT_QTY PURCHASE_COUNT_QTY,
		NULL R_PURCHASE_BASE_QTY,
		NULL R_PURCHASE_COUNT_QTY,
		NULL INOUT_BASE_QTY,
		NULL INOUT_COUNT_QTY
	FROM DMS_PURCHASE_TRANSFER_BASE S WITH(NOLOCK)
	INNER JOIN SPE_BEGIN_STOCK_DATE SB ON SB.DIST_ID = S.DIST_ID AND S.BILL_DATE >= SB.BEGIN_STOCK_DATE
	INNER JOIN DMS_DATA_PURCHASE DDS ON S.ORIG_DATA_ID = DDS.ID
	LEFT JOIN DMS_STORE_MAPPING SM ON SM.ACTIVE_S_ID=DDS.ACTIVE_W_ID
	LEFT JOIN DMS_BALANCE_DATE DBD WITH(NOLOCK) ON ((S.TRANSFER_TIME <= (CONVERT(VARCHAR(10),DBD.BALANCE_END_DATE,120) + ' 23:59:59') AND
		S.BILL_DATE BETWEEN DBD.BUSINESS_START_DATE AND CONVERT(VARCHAR(10),DBD.BUSINESS_END_DATE,120) + ' 23:59:59')) OR
		(
		S.BILL_DATE >= ISNULL(DBD.MIN_BILL_DATE,'2000-01-01') AND
		S.BILL_DATE < DBD.BUSINESS_START_DATE AND
		S.TRANSFER_TIME BETWEEN DBD.BALANCE_START_DATE AND CONVERT(VARCHAR(10),DBD.BALANCE_END_DATE,120) + ' 23:59:59'
		)
	WHERE 1=1 AND DBD.SIGN = @SIGN_MONTH
	AND( SM.TARGET_STORE_CODE IS NULL OR SM.TARGET_STORE_CODE!='QITA_PINGBI')
	UNION ALL
	 --本月调整进货
	 SELECT
		DATA.SIGN,
		DATA.DIST_ID,
		DATA.PROD_ID,
		NULL OPENINGSTOCK_BASE_QTY,
		NULL OPENINGSTOCK_COUNT_QTY,
		DATA.PROD_QUANTITY * PROD_UNIT.CONV_UNIT2_VAL * BASE_UNIT.CONV_UNIT1_VAL / PROD_UNIT.CONV_UNIT1_VAL / BASE_UNIT.CONV_UNIT2_VAL CLOSINGSTOCK_BASE_QTY,
		DATA.PROD_QUANTITY * PROD_UNIT.CONV_UNIT2_VAL * COUNT_UNIT.CONV_UNIT1_VAL / PROD_UNIT.CONV_UNIT1_VAL / COUNT_UNIT.CONV_UNIT2_VAL CLOSINGSTOCK_COUNT_QTY,
		NULL SALE_BASE_QTY,
		NULL SALE_COUNT_QTY,
		NULL R_SALE_BASE_QTY,
		NULL R_SALE_COUNT_QTY,
		NULL PURCHASE_BASE_QTY,
		NULL PURCHASE_COUNT_QTY,
		DATA.PROD_QUANTITY * PROD_UNIT.CONV_UNIT2_VAL * BASE_UNIT.CONV_UNIT1_VAL / PROD_UNIT.CONV_UNIT1_VAL / BASE_UNIT.CONV_UNIT2_VAL R_PURCHASE_BASE_QTY,
		DATA.PROD_QUANTITY * PROD_UNIT.CONV_UNIT2_VAL * COUNT_UNIT.CONV_UNIT1_VAL / PROD_UNIT.CONV_UNIT1_VAL / COUNT_UNIT.CONV_UNIT2_VAL R_PURCHASE_COUNT_QTY,
		NULL INOUT_BASE_QTY,
		NULL INOUT_COUNT_QTY
	FROM V_DMS_REVERSE_DATA_PURCHASE DATA WITH(NOLOCK)
	INNER JOIN MDM_UNIT_CONVERSION PROD_UNIT WITH(NOLOCK) ON PROD_UNIT.PROD_ID = DATA.PROD_ID AND PROD_UNIT.CONV_UNIT1_ID = DATA.PROD_UNIT
	INNER JOIN MDM_PRODUCT MP WITH(NOLOCK) ON DATA.PROD_ID = MP.PROD_ID
	INNER JOIN MDM_UNIT_CONVERSION COUNT_UNIT WITH(NOLOCK) ON COUNT_UNIT.PROD_ID = MP.PROD_ID AND COUNT_UNIT.CONV_UNIT1_ID = MP.PROD_COUNTUNIT_ID
	INNER JOIN MDM_UNIT_CONVERSION BASE_UNIT WITH(NOLOCK) ON BASE_UNIT.PROD_ID = MP.PROD_ID AND BASE_UNIT.CONV_UNIT1_ID = MP.PROD_BASEUNIT_ID
	INNER JOIN DMS_BALANCE_DATE DBD  ON DATA.SIGN=DBD.SIGN AND DBD.SIGN = @SIGN_MONTH
	OPTION(RECOMPILE) ;

	INSERT INTO T_DIST_CLOSINGSTOCK_MONTH (
			SIGN,
			DIST_ID,
			PROD_ID,
			OPENINGSTOCK_BASE_QTY,
			OPENINGSTOCK_COUNT_QTY,
			CLOSINGSTOCK_BASE_QTY,
			CLOSINGSTOCK_COUNT_QTY,
			SALE_BASE_QTY,
			SALE_COUNT_QTY,
			R_SALE_BASE_QTY,
			R_SALE_COUNT_QTY,
			PURCHASE_BASE_QTY,
			PURCHASE_COUNT_QTY,
			R_PURCHASE_BASE_QTY,
			R_PURCHASE_COUNT_QTY,
			INOUT_BASE_QTY,
			INOUT_COUNT_QTY
		)
	SELECT
		SIGN,
		DIST_ID,
		PROD_ID,
		SUM(OPENINGSTOCK_BASE_QTY) OPENINGSTOCK_BASE_QTY,
		SUM(OPENINGSTOCK_COUNT_QTY) OPENINGSTOCK_COUNT_QTY,
		SUM(CLOSINGSTOCK_BASE_QTY) CLOSINGSTOCK_BASE_QTY,
		SUM(CLOSINGSTOCK_COUNT_QTY) CLOSINGSTOCK_COUNT_QTY,
		SUM(SALE_BASE_QTY) SALE_BASE_QTY,
		SUM(SALE_COUNT_QTY) SALE_COUNT_QTY,
		SUM(R_SALE_BASE_QTY) R_SALE_BASE_QTY,
		SUM(R_SALE_COUNT_QTY) R_SALE_COUNT_QTY,
		SUM(PURCHASE_BASE_QTY) PURCHASE_BASE_QTY,
		SUM(PURCHASE_COUNT_QTY) PURCHASE_COUNT_QTY,
		SUM(R_PURCHASE_BASE_QTY) R_PURCHASE_BASE_QTY,
		SUM(R_PURCHASE_COUNT_QTY) R_PURCHASE_COUNT_QTY,
		SUM(INOUT_BASE_QTY) INOUT_BASE_QTY,
		SUM(INOUT_COUNT_QTY) INOUT_COUNT_QTY
	FROM #STOCK_MONTH
	GROUP BY SIGN,
		DIST_ID,
		PROD_ID
END